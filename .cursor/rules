---
description: Core overview of Soloist so Cursor always codes and explains in line with the project’s architecture, stack, and UI conventions.
alwaysApply: true
---
@source module:convex
@source file:convex/_generated/api.ts

Convex guidelines

Function guidelines

New function syntax

ALWAYS use the new function syntax for Convex functions. For example:
typescript
    import { query } from "./_generated/server";
    import { v } from "convex/values";
    export const f = query({
        args: {
            /* ... */
        },
        returns: v.null(),
        handler: async (ctx, args) => {
            // Function body
        },
    });
    

Http endpoint syntax

HTTP endpoints are defined in convex/http.ts and require an httpAction decorator. For example:
typescript
    import { httpRouter } from "convex/server";
    import { httpAction } from "./_generated/server";
    const http = httpRouter();
    http.route({
        path: "/echo",
        method: "POST",
        handler: httpAction(async (ctx, req) => {
            const body = await req.bytes();
            return new Response(body, { status: 200 });
        }),
    });
    

Validators

Below is an example of an array validator:
typescript
    import { mutation } from "./_generated/server";
    import { v } from "convex/values";
    export default mutation({
      args: {
        simpleArray: v.array(v.union(v.string(), v.number())),
      },
      handler: async (ctx, args) => {
        //...
      },
    });
    

Schema definitions

Use defineSchema and defineTable in convex/server to set up your tables with validators:
```typescript
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  results: defineTable(
    v.union(
      v.object({ kind: v.literal("error"), errorMessage: v.string() }),
      v.object({ kind: v.literal("success"), value: v.number() })
    )
  )
});
```
---

# Soloist (Solomon‑Powered) – Project Overview

## 1. Product summary
Soloist is a **daily‑log heat‑mapping app**.  
* Users record daily reflections tied to their own goals or requirements.  
* “Solomon” (our AI layer) scores each log **0 = worst‑day‑ever → 100 = best‑day‑ever**.  
* A calendar‑style heatmap visualises scores via colour intensity.

## 2. Tech stack & key libraries
| Area | Choice | Notes |
|------|--------|-------|
| Framework | **Next.js** (TypeScript, App Router) | running inside Electron |
| Database  | **Convex** (serverless)               | mutations/queries for logs, feeds, forecasts |
| Styling   | **Tailwind CSS** (base **Zinc** palette) | no separate CSS files |
| UI kit    | **ShadCN** components + **Lucide‑React** icons | consistent design tokens |
| State     | **Zustand** | single source of truth for user, sidebar, feed, forecast |
| AI layer  | OpenAI (serverless actions) | Solomon scoring + 7‑day forecast generation |

## 3. Main window layout (SPA)
┌───────────────────────────────────────────────────────────────┐
│ 1. Left Sidebar │ 2. Canvas (Heatmap) │ 3. Right Sidebar │
└───────────────────────────────────────────────────────────────┘

### 3.1 Left Sidebar  
* Light theme navigation: **Home**, **Logs**, **Analytics**, **Settings** (more coming).  
* Bottom **“New Log”** button → opens **Daily Log Form** in right sidebar.

### 3.2 Canvas (centre)  
* Month‑by‑month heatmap.  
* Empty squares = default Zinc; logged squares = colour mapped to Solomon score.  
* Click any day → corresponding **Daily Log Viewer/Editor** opens in right sidebar.

### 3.3 Right Sidebar  
* Default: **Feed** (generative life‑line content).  
* Alternate states:  
  1. **Daily Log Form** (from “New Log”)  
  2. **Daily Log Viewer/Editor** (from Canvas click)  
* Draggable **resizer bar** (left edge) lets user adjust panel width.

## 4. Data & workflow
1. **Daily Log submission** → Convex mutation → Solomon scoring → heatmap update.  
2. Need **≥ 4 logs** before generating a **7‑day emotion forecast** (stored in `forecast` table).  
3. Zustand stores  
   * `userStore` – auth & profile (canonical)  
   * `sidebarStore` – left‑sidebar state  
   * `feedStore` – feed items & status  

## 5. Component & style conventions
* Components live in `renderer/src/app/**/_components/`; each is a TSX file with a top‑level Props interface and a named export.  
* Tailwind classes only (no raw CSS); use ShadCN variants.  
* Default colours come from the Zinc scale; accents use ShadCN tokens.  
* Prefer Framer Motion for animations.

---
_This rule ensures every Cursor suggestion aligns with Soloist’s domain language, file structure, and tech choices._